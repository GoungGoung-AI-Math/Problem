/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.demo.my.kafka.infra.avrobuild;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ReqImageContent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -52105309584407107L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReqImageContent\",\"namespace\":\"com.example.demo.my.kafka.infra.avrobuild\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MessageType\",\"symbols\":[\"TEXT\",\"IMAGE_URL\"]}},{\"name\":\"encodedImage\",\"type\":{\"type\":\"record\",\"name\":\"EncodedImage\",\"fields\":[{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReqImageContent> ENCODER =
      new BinaryMessageEncoder<ReqImageContent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReqImageContent> DECODER =
      new BinaryMessageDecoder<ReqImageContent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ReqImageContent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ReqImageContent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ReqImageContent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ReqImageContent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ReqImageContent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ReqImageContent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ReqImageContent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ReqImageContent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.example.demo.my.kafka.infra.avrobuild.MessageType type;
   private com.example.demo.my.kafka.infra.avrobuild.EncodedImage encodedImage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReqImageContent() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param encodedImage The new value for encodedImage
   */
  public ReqImageContent(com.example.demo.my.kafka.infra.avrobuild.MessageType type, com.example.demo.my.kafka.infra.avrobuild.EncodedImage encodedImage) {
    this.type = type;
    this.encodedImage = encodedImage;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return encodedImage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (com.example.demo.my.kafka.infra.avrobuild.MessageType)value$; break;
    case 1: encodedImage = (com.example.demo.my.kafka.infra.avrobuild.EncodedImage)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.example.demo.my.kafka.infra.avrobuild.MessageType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.example.demo.my.kafka.infra.avrobuild.MessageType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'encodedImage' field.
   * @return The value of the 'encodedImage' field.
   */
  public com.example.demo.my.kafka.infra.avrobuild.EncodedImage getEncodedImage() {
    return encodedImage;
  }


  /**
   * Sets the value of the 'encodedImage' field.
   * @param value the value to set.
   */
  public void setEncodedImage(com.example.demo.my.kafka.infra.avrobuild.EncodedImage value) {
    this.encodedImage = value;
  }

  /**
   * Creates a new ReqImageContent RecordBuilder.
   * @return A new ReqImageContent RecordBuilder
   */
  public static com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder newBuilder() {
    return new com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder();
  }

  /**
   * Creates a new ReqImageContent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReqImageContent RecordBuilder
   */
  public static com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder newBuilder(com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder other) {
    if (other == null) {
      return new com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder();
    } else {
      return new com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder(other);
    }
  }

  /**
   * Creates a new ReqImageContent RecordBuilder by copying an existing ReqImageContent instance.
   * @param other The existing instance to copy.
   * @return A new ReqImageContent RecordBuilder
   */
  public static com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder newBuilder(com.example.demo.my.kafka.infra.avrobuild.ReqImageContent other) {
    if (other == null) {
      return new com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder();
    } else {
      return new com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ReqImageContent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReqImageContent>
    implements org.apache.avro.data.RecordBuilder<ReqImageContent> {

    private com.example.demo.my.kafka.infra.avrobuild.MessageType type;
    private com.example.demo.my.kafka.infra.avrobuild.EncodedImage encodedImage;
    private com.example.demo.my.kafka.infra.avrobuild.EncodedImage.Builder encodedImageBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.encodedImage)) {
        this.encodedImage = data().deepCopy(fields()[1].schema(), other.encodedImage);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasEncodedImageBuilder()) {
        this.encodedImageBuilder = com.example.demo.my.kafka.infra.avrobuild.EncodedImage.newBuilder(other.getEncodedImageBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ReqImageContent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.demo.my.kafka.infra.avrobuild.ReqImageContent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.encodedImage)) {
        this.encodedImage = data().deepCopy(fields()[1].schema(), other.encodedImage);
        fieldSetFlags()[1] = true;
      }
      this.encodedImageBuilder = null;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.example.demo.my.kafka.infra.avrobuild.MessageType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder setType(com.example.demo.my.kafka.infra.avrobuild.MessageType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedImage' field.
      * @return The value.
      */
    public com.example.demo.my.kafka.infra.avrobuild.EncodedImage getEncodedImage() {
      return encodedImage;
    }


    /**
      * Sets the value of the 'encodedImage' field.
      * @param value The value of 'encodedImage'.
      * @return This builder.
      */
    public com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder setEncodedImage(com.example.demo.my.kafka.infra.avrobuild.EncodedImage value) {
      validate(fields()[1], value);
      this.encodedImageBuilder = null;
      this.encodedImage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedImage' field has been set.
      * @return True if the 'encodedImage' field has been set, false otherwise.
      */
    public boolean hasEncodedImage() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'encodedImage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.example.demo.my.kafka.infra.avrobuild.EncodedImage.Builder getEncodedImageBuilder() {
      if (encodedImageBuilder == null) {
        if (hasEncodedImage()) {
          setEncodedImageBuilder(com.example.demo.my.kafka.infra.avrobuild.EncodedImage.newBuilder(encodedImage));
        } else {
          setEncodedImageBuilder(com.example.demo.my.kafka.infra.avrobuild.EncodedImage.newBuilder());
        }
      }
      return encodedImageBuilder;
    }

    /**
     * Sets the Builder instance for the 'encodedImage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder setEncodedImageBuilder(com.example.demo.my.kafka.infra.avrobuild.EncodedImage.Builder value) {
      clearEncodedImage();
      encodedImageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'encodedImage' field has an active Builder instance
     * @return True if the 'encodedImage' field has an active Builder instance
     */
    public boolean hasEncodedImageBuilder() {
      return encodedImageBuilder != null;
    }

    /**
      * Clears the value of the 'encodedImage' field.
      * @return This builder.
      */
    public com.example.demo.my.kafka.infra.avrobuild.ReqImageContent.Builder clearEncodedImage() {
      encodedImage = null;
      encodedImageBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReqImageContent build() {
      try {
        ReqImageContent record = new ReqImageContent();
        record.type = fieldSetFlags()[0] ? this.type : (com.example.demo.my.kafka.infra.avrobuild.MessageType) defaultValue(fields()[0]);
        if (encodedImageBuilder != null) {
          try {
            record.encodedImage = this.encodedImageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("encodedImage"));
            throw e;
          }
        } else {
          record.encodedImage = fieldSetFlags()[1] ? this.encodedImage : (com.example.demo.my.kafka.infra.avrobuild.EncodedImage) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReqImageContent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReqImageContent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReqImageContent>
    READER$ = (org.apache.avro.io.DatumReader<ReqImageContent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.type.ordinal());

    this.encodedImage.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = com.example.demo.my.kafka.infra.avrobuild.MessageType.values()[in.readEnum()];

      if (this.encodedImage == null) {
        this.encodedImage = new com.example.demo.my.kafka.infra.avrobuild.EncodedImage();
      }
      this.encodedImage.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = com.example.demo.my.kafka.infra.avrobuild.MessageType.values()[in.readEnum()];
          break;

        case 1:
          if (this.encodedImage == null) {
            this.encodedImage = new com.example.demo.my.kafka.infra.avrobuild.EncodedImage();
          }
          this.encodedImage.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










